generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String             @unique
  emailVerified    DateTime?
  image            String?
  role             UserRole?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  grantEmail       String?
  grantId          String?
  userName         String?            @unique
  accounts         Account[]
  bookings         Booking[]          @relation("CustomerBookings")
  comments         Comment[]
  sessions         Session[]
  Shop             Shop[]
  TimeSlotTemplate TimeSlotTemplate[]
  Availability     Availability[]     @relation("AvailabilityToUser")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Availability {
  id        String   @id @default(uuid())
  day       Day
  fromTime  String
  tillTime  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]   @relation("AvailabilityToUser")
}

model TimeSlotTemplate {
  id         String   @id @default(cuid())
  ownerId    String
  year       Int
  month      Int
  slotCount  Int
  slotLength Int
  breaks     String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  owner      User     @relation(fields: [ownerId], references: [id])
}

model Shop {
  id       String    @id @default(cuid())
  name     String    @unique
  ownerId  String
  products Product[]
  owner    User      @relation(fields: [ownerId], references: [id])
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  shopId      String
  bookings    Booking[]
  comments    Comment[]
  shop        Shop      @relation(fields: [shopId], references: [id])
}

model Booking {
  id         String        @id @default(cuid())
  customerId String
  productId  String
  startTime  DateTime
  endTime    DateTime
  status     BookingStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  customer   User          @relation("CustomerBookings", fields: [customerId], references: [id])
  product    Product       @relation(fields: [productId], references: [id])
}

model Comment {
  id        String    @id @default(cuid())
  userId    String
  productId String
  content   String
  parentId  String?
  createdAt DateTime  @default(now())
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  product   Product   @relation(fields: [productId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum UserRole {
  CUSTOMER
  BUSINESS_OWNER
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}
